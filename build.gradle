apply plugin: 'java'
apply plugin: 'maven'

group = 'com.github.beothorn'
version = '3.17-SNAPSHOT'

description = """FilmeUtils baixa legendas de sÃ©ries do legendas.tv e respectivos torrents."""

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {

    compile(
            [group: 'commons-lang', name: 'commons-lang', version: '2.6'],
            [group: 'commons-configuration', name: 'commons-configuration', version: '1.10'],
            [group: 'commons-cli', name: 'commons-cli', version: '1.2'],
            [group: 'com.github.junrar', name: 'junrar', version: '0.7'],
            [group: 'commons-io', name: 'commons-io', version: '2.4'],
            [group: 'com.github.beothorn', name: 'URISchemeHandler', version: '1.7'],
            [group: 'com.github.beothorn', name: 'webGrude', version: '0.0.3']
    )

    testCompile(
            [group: 'junit', name : 'junit', version : '4.10']
    )
}

apply plugin: 'gradle-one-jar'

apply plugin: 'git'
apply plugin: 'console'
apply plugin: 'github'
apply plguin: 'release'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
    }
}

task awesomeFunJar(type: OneJar) {
    mainClass = 'Main'
    manifest {
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
        attributes 'Implementation-Version': version
    }
}

release {
    /* Let's check that everything is committed */
    doFirst {
        if (!project.git.status().isEmpty()) {
            throw new GradleException('You have uncommitted changes.')
        }
    }

    /* Ask user for a release version, suggesting some default variant. */
    version = { console.prompt(' > Please enter release version:', project.version - '-SNAPSHOT') }
    tag = { "r$project.release.version" }
    commitMessage = { "Release $project.release.version" }

    /* Files and projects that needs to be updated with a new release version. */
    update {
        file project.file('build.gradle')
        projects allprojects
    }

    /* Spec for next version. As above, asking user input. */
    next {
        version = { console.prompt(' > Please enter next version:', bumpVersion(project.release.version)) }
        commitMessage = { "Bumping version to $project.release.next.version" }
    }

    /* Tasks that needs to be performed during release. Will be done after tag step. */
    dependsOn subprojects.findAll { it.name != 'util' }*.install
    dependsOn project('driver').uberJar
    dependsOn project('driver-compat').uberJar
    dependsOn publishWiki
    dependsOn draftGhRelease
}